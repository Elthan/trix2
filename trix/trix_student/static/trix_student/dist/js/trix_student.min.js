(function(){angular.module("trixStudent",["ngCookies","ui.bootstrap","trixStudent.directives","trixStudent.assignments.controllers"]).run(["$http","$cookies",function($http,$cookies){return $http.defaults.headers.common["X-CSRFToken"]=$cookies.csrftoken}])}).call(this),function(){angular.module("trixStudent.assignments.controllers",[]).controller("AddTagCtrl",["$scope","$window",function($scope,$window){$scope.tagToAdd="",$scope.addTag=function(){var currentUrl,tags;return currentUrl=new Url,tags=currentUrl.query.tags,tags=null!=tags&&""!==tags?""+tags+","+$scope.tagToAdd:$scope.tagToAdd,currentUrl.query.tags=tags,$window.location.href=currentUrl.toString()}}]).controller("RemoveTagCtrl",["$scope","$window",function($scope,$window){return $scope.removeTag=function(tagToRemove){var currentUrl,index,tags,tagsArray;return currentUrl=new Url,tags=currentUrl.query.tags,tagsArray=tags.split(","),index=tagsArray.indexOf(tagToRemove),tagsArray.splice(index,1),tags=tagsArray.join(","),currentUrl.query.tags=tags,$window.location.href=currentUrl.toString()}}]).controller("SolutionCtrl",["$scope",function($scope){return $scope.isVisible=!1}]).controller("AssignmentCtrl",["$scope","$http",function($scope,$http){return $scope.howsolved=null,$scope.saving=!1,$scope.buttonClass="btn-default",$scope.boxClass="",$scope.$watch("howsolved",function(newValue){console.log(newValue),"bymyself"===newValue?($scope.buttonClass="btn-success",$scope.boxClass="trix-assignment-solvedbymyself"):"withhelp"===newValue?($scope.buttonClass="btn-warning",$scope.boxClass="trix-assignment-solvedwithhelp"):($scope.buttonClass="btn-default",$scope.boxClass="trix-assignment-notsolved")}),$scope._getApiUrl=function(){return"/assignment/howsolved/"+$scope.assignment_id},$scope._showError=function(message){return $scope.saving=!1,alert(message)},$scope._updateHowSolved=function(howsolved){var data;return $scope.saving=!0,data={howsolved:howsolved},$http.post($scope._getApiUrl(),data).success(function(data){return $scope.saving=!1,$scope.howsolved=data.howsolved}).error(function(){return $scope._showError("An error occurred!")})},$scope.solvedOnMyOwn=function(){return $scope._updateHowSolved("bymyself")},$scope.solvedWithHelp=function(){return $scope._updateHowSolved("withhelp")},$scope.notSolved=function(){return $scope.saving=!0,$http["delete"]($scope._getApiUrl()).success(function(){return $scope.saving=!1,$scope.howsolved=null}).error(function(data,status){return 404===status?($scope.saving=!1,$scope.howsolved=null):$scope._showError("An error occurred!")})}}])}.call(this),function(){angular.module("trixStudent.directives",[]).directive("trixAriaChecked",function(){return{restrict:"A",scope:{checked:"=trixAriaChecked"},controller:function(){},link:function(scope,element,attrs){var updateAriaChecked;updateAriaChecked=function(){return scope.checked?element.attr("aria-checked","true"):element.attr("aria-checked","false")},updateAriaChecked(),scope.$watch(attrs.trixAriaChecked,function(){return updateAriaChecked()})}}})}.call(this);
//# sourceMappingURL=trix_student.min.js.map